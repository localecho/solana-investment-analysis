version: '3.8'

services:
  # Main SlackToDoc application
  slacktodoc:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: slacktodoc-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    networks:
      - slacktodoc-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: slacktodoc-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: slacktodoc_prod
      POSTGRES_USER: slacktodoc_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - slacktodoc-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: slacktodoc-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - slacktodoc-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: slacktodoc-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
    networks:
      - slacktodoc-network

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: slacktodoc-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - slacktodoc-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  slacktodoc-network:
    driver: bridge